{"version":3,"sources":["./src/environments/environment.ts","./src/app/tester/tester.service.ts","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/tester/tester-bug-count.component.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { IDevice } from './device.interface';\nimport { ITesterBugCount } from './tester-bug-count.interface'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TesterService {\n\n  constructor(private http: HttpClient) { }\n\n  public getTesterCountries(): Observable<string[]> {\n    return this.http.get<string[]>(`http://localhost:8080/api/tester/countries`).pipe(\n      map((data: string[]) => {\n        return data;\n      }), catchError( error => {\n        return throwError( 'Error loading countries!' );\n      })\n   );\n  }\n\n  public getTesterDevices(): Observable<IDevice[]> {\n    return this.http.get<IDevice[]>(`http://localhost:8080/api/tester/devices`).pipe(\n      map(response => response),\n       catchError( error => {\n        return throwError( 'Error loading devices!' );\n      })\n    );\n  }\n\n  public getTesteBugCount(countries: string[], deviceIds: number[]): Observable<ITesterBugCount[]> {\n    const params = new HttpParams()\n      .set('countries', countries.join(', '))\n      .set('deviceIds', deviceIds.join(', '));\n   \n    return this.http.get<ITesterBugCount[]>(`http://localhost:8080/api/tester/tester-bug-count`, {params}).pipe(\n      map(response => response),\n       catchError( error => {\n        return throwError( 'Error loading tester bug counts!' );\n      })\n    );\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <div class=\"wrapper\">\n      <h1>CSV Coding Exercise</h1>\n      <h2>By Ryan Colantuono</h2>\n      <p>Generted using Spring Boot with Java 11. Parses CSV files with <a href=\"http://opencsv.sourceforge.net/\">Opencvs</a>. \n      Front end built with angular 11, with the multiselect dropdown handled by <a href=\"https://github.com/nileshpatel17/ng-multiselect-dropdown\">\n      ng-multiselect-dropdown</a>. Pulling in Angular for the simple front end might have been over kill, \n      but I figured I would go with something closer to Applause's tech stack for this, and it let me pull in the multiselect directive to use. </p>\n      <tester-bug-count></tester-bug-count>\n    </div>\n  `\n})\nexport class AppComponent {\n  title = 'Csv Coding Exercise';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { NgMultiSelectDropDownModule } from 'ng-multiselect-dropdown';\n\nimport { AppComponent } from './app.component';\nimport { TesterBugCountComponent } from './tester/tester-bug-count.component';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TesterBugCountComponent\n  ],\n  imports: [\n    CommonModule,\n    BrowserModule,\n    FormsModule,\n    HttpClientModule,\n    NgMultiSelectDropDownModule.forRoot()\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { IDropdownSettings } from 'ng-multiselect-dropdown';\nimport { TesterService} from './tester.service';\nimport { IDevice } from './device.interface';\nimport { ITesterBugCount } from './tester-bug-count.interface';\n\n@Component({\n  selector: 'tester-bug-count',\n  template: `\n  <div class=\"multi-select\">\n    <ng-multiselect-dropdown\n      [placeholder]=\"'Select Countries...'\"\n      [settings]=\"countryDropdownSettings\"\n      [data]=\"countries\"\n      [(ngModel)]=\"selectedCountries\"\n      (onSelect)=\"getTesterBugCount()\"\n      (onSelectAll)=\"onSelectAllCountries($event)\"\n      (onDeSelect)=\"getTesterBugCount()\"\n      (onDeSelectAll)=\"getTesterBugCount()\"\n    >\n    </ng-multiselect-dropdown>\n  </div>\n  \n  <div class=\"multi-select\">\n    <ng-multiselect-dropdown\n      [placeholder]=\"'Select Devices...'\"\n      [settings]=\"deviceDropdownSettings\"\n      [data]=\"devices\"\n      [(ngModel)]=\"selectedDevices\"\n      (onSelect)=\"getTesterBugCount()\"\n      (onSelectAll)=\"onSelectAllDevices($event)\"\n      (onDeSelect)=\"getTesterBugCount()\"\n      (onDeSelectAll)=\"getTesterBugCount()\"\n    >\n    </ng-multiselect-dropdown> \n  </div>\n  <div class=\"tester-bug-count-results\">\n    <p *ngIf=\"(testerBugCounts == null || testerBugCounts.length == 0); else showResults\">No testers found for the criteria you selected.</p>\n    <ng-template #showResults>\n      <b>Tester experience for search criteria:</b>\n      <ul class=\"tester-bug-count-list\">\n        <li *ngFor=\" let bugCount of testerBugCounts; trackBy: trackByFn;\">\n          {{bugCount.fullName}} has {{bugCount.count}} bugs.\n        </li>\n      </ul>\n    </ng-template>\n  </div>\n \n  `,\n  styleUrls: ['./tester-bug-count.component.css'  ]\n  \n})\n\nexport class TesterBugCountComponent implements OnInit {\n\n  countries: string[] = [];\n  devices: IDevice[] = [];\n  testerBugCounts: ITesterBugCount[] = [];\n  selectedCountries: string[] = [];\n  selectedDevices: IDevice[] = [];\n  countryDropdownSettings: IDropdownSettings = {};\n  deviceDropdownSettings: IDropdownSettings = {};\n\n  constructor(private testerService: TesterService) { }\n\n  ngOnInit(): void {\n\n    this.countryDropdownSettings = {\n      singleSelection: false,\n      selectAllText: 'Select All',\n      unSelectAllText: 'Unselect All'\n    };\n\n    this.deviceDropdownSettings = {\n      singleSelection: false,\n      idField: 'deviceId',\n      textField: 'description',\n      selectAllText: 'Select All',\n      unSelectAllText: 'Unselect All'\n    };\n\n    this.getTesterCountries();\n    this.getTesterDevices();\n    this.getTesterBugCount()\n  }\n\n  getTesterCountries():void {\n    this.testerService.getTesterCountries().subscribe((countries:string[]) => {\n      this.countries = countries;\n    });\n  }\n\n  getTesterDevices(): void {\n    this.testerService.getTesterDevices().subscribe((devices:IDevice[]) => {\n      this.devices = devices;\n    });\n  }\n\n  getTesterBugCount(): void {\n    const deviceIds = this.selectedDevices.map(d => d.deviceId);\n    this.testerService.getTesteBugCount(this.selectedCountries, deviceIds).subscribe((bugCounts:ITesterBugCount[]) => {\n      this.testerBugCounts = bugCounts;\n    });\n  }\n\n  trackByFn(index: number, bugCount: ITesterBugCount) {\n    return bugCount.testerId;\n  }\n\n  /*\n   * The built in event for this doesn't seem to actually update our selected variable with all the values,\n   * which is annoying\n   */\n  onSelectAllCountries(items: any) {\n    this.selectedCountries = items;\n    this.getTesterBugCount();\n  }\n\n  onSelectAllDevices(items: any) {\n    this.selectedDevices = items;\n    this.getTesterBugCount();\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}